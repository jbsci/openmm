name: CI

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"


jobs:
  unix:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    env:
      CCACHE_BASEDIR: "${{ github.workspace }}"
      CCACHE_DIR: "${{ github.workspace }}/.ccache"
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_MAXSIZE: 400M
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux CPU Python 3.13
            python-version: "3.13"
            os: ubuntu-latest
            env: ubuntu-latest
            OPENCL: false
            cuda-version: ""
            CMAKE_FLAGS: |
              -DOPENMM_BUILD_OPENCL_LIB=OFF \
              -DOPENMM_BUILD_OPENCL_TESTS=OFF \

    steps:
      - uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v3
        name: "Prepare base dependencies"
        if: matrix.python-version == 'pypy'
        with:
          activate-environment: build
          environment-file: devtools/ci/gh-actions/conda-envs/build-${{ matrix.env }}.yml
          auto-activate-base: false
          miniforge-variant: Miniforge-pypy3
          use-mamba: true

      - uses: conda-incubator/setup-miniconda@v3
        name: "Prepare base dependencies"
        if: matrix.python-version != 'pypy'
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: build
          environment-file: devtools/ci/gh-actions/conda-envs/build-${{ matrix.env }}.yml
          auto-activate-base: false
          miniforge-variant: Miniforge3
          use-mamba: true

      - name: "Prepare ccache"
        id: prepare-ccache
        shell: bash -l {0}
        run: |
          echo "key=$(echo "${{ matrix.name }}" | tr -d ' .')" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

          ccache -p
          ccache -z

      - name: "Restore ccache"
        uses: actions/cache@v3.3.2
        with:
          path: .ccache
          key: ccache-${{ secrets.CACHE_VERSION }}-${{ steps.prepare-ccache.outputs.key }}-${{ steps.prepare-ccache.outputs.timestamp }}
          restore-keys: |
            ccache-${{ secrets.CACHE_VERSION }}-${{ steps.prepare-ccache.outputs.key }}-

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          mkdir build
          cd build

          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
            -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ${{ matrix.CMAKE_FLAGS }}

      - name: "Build OpenMM"
        shell: bash -l {0}
        run: |
          cd build
          make -j4 install

      - name: "Build Python wrappers"
        shell: bash -l {0}
        if: ${{ !contains(matrix.CMAKE_FLAGS, 'OPENMM_BUILD_PYTHON_WRAPPERS=OFF') }}
        run: |
          cd build
          make -j4 PythonInstall

      - name: "Check ccache performance"
        shell: bash -l {0}
        run: ccache -s
